<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
      _               _        _         _
  ___| |__   ___  ___| | _____| |_ _   _| | ___
 / __| '_ \ / _ \/ __| |/ / __| __| | | | |/ _ \
| (__| | | |  __/ (__|   <\__ \ |_| |_| | |  __/
 \___|_| |_|\___|\___|_|\_\___/\__|\__, |_|\___|
                                   |___/

A Checkstyle configuration that closely mimics the coding conventions
found in the Java Google Style Guide:

https://google.github.io/styleguide/javaguide.html

-->
<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="build/checkstyle/suppressions.xml" />
    </module>

    <!-- Check for copyright header. -->
    <module name="Header">
        <property name="headerFile" value="build/checkstyle/LICENSE.txt"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <!-- Prohibit consecutive empty lines (except the lines after package/import). -->
    <module name="RegexpMultiline">
        <property name="format" value="\n *(?!package )(?!import )[^\n]+\n{3,}"/>
        <property name="message" value="two or more consecutive empty lines"/>
    </module>
    <module name="NewlineAtEndOfFile"/>

    <module name="LineLength">
        <property name="max" value="120"/>
        <!--
        Line length restrictions do not apply to:
           - package statements
           - import statements
           - lengthy paths used in @RequestMapping annotations
           - URIs that may appear in string constants or Javadocs
        -->
        <property name="ignorePattern" value="^package.*|^import.*|^\s+(@RequestMapping\()?value = .*|\a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <!--module name="AvoidStarImport"/-->
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
             value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
             <message key="ws.notPreceded"
             value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="WhitespaceAfter"/>
        <module name="OneStatementPerLine"/>
        <module name="EmptyStatement"/> <!-- Detects empty statements (standalone ";" semicolon) -->
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="SingleSpaceSeparator"/>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
             value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
             value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*_$"/>
            <message key="name.invalidPattern"
             value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
             value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
             value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
             value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
             value="GenericWhitespace ''{0}'' is followed by whitespace."/>
             <message key="ws.preceded"
             value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
             <message key="ws.illegalFollow"
             value="GenericWhitespace ''{0}'' should followed by whitespace."/>
             <message key="ws.notPreceded"
             value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="forceStrictCondition" value="true"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="4"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="ParenPad"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation"/>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SummaryJavadocCheck">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z_][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName"/>
        <module name="InterfaceTypeParameterName"/>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <!--module name="VisibilityModifier"/-->
        <module name="FinalClass"/>
        <module name="FinalParameters">
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, LITERAL_CATCH, FOR_EACH_CLAUSE"/>
        </module>
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
            <property name="validateEnhancedForLoopVariable" value="true"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <module name="IllegalImport">
            <!-- Use org.slf4j.* instead. -->
            <!-- Use org.apache.commons.collections4.* instead. -->
            <!-- Use org.apache.commons.lang3.* instead. -->
            <property name="illegalPkgs" value="^java\.util\.logging.*, ^org\.apache\.commons\.collections(?!4\.).*, ^org\.apache\.commons\.lang(?!3\.).*"/>
            <!-- Use java.nio.charset.StandardCharsets instead. -->
            <!-- Use java.util.Optional instead. -->
            <property name="illegalClasses" value="^com\.google\.common\.base\.(Charsets|Optional).*"/>
            <!--
                Use regexes to match illegal packages and classes, see:
                https://github.com/checkstyle/checkstyle/issues/4954#issuecomment-368251186
            -->
            <property name="regexp" value="true" />
        </module>
        <module name="CommentsIndentation"/>
        <module name="MissingOverride"/>
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <!-- Check for trailing whitespace at the end of each line. -->
        <module name="Regexp">
            <property name="format" value="[ \t]+$"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Trailing whitespace"/>
        </module>
        <!--
            Require all non-exception classes to be declared final.

            "Design and document for inheritance or else prohibit it."
                 - Josh Bloch
         -->
        <module name="Regexp">
            <!-- Negative lookbehind assertion: https://stackoverflow.com/a/4276455 -->
            <!-- Any class name that does not end with "Exception" must be declared final. -->
            <property name="format" value="public (static )?class [A-Z][a-zA-Z0-9]+(?&lt;!Exception) .*"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Non-exception classes must be declared final: public final class"/>
        </module>
        <!-- Method and constructor arguments must always start on a new-line. -->
        <module name="Regexp">
            <property name="format" value="(public|private|protected) ([A-Za-z0-9]+)\((?!(\)|$))"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Constructor arguments must always start on a new-line"/>
        </module>
        <module name="Regexp">
            <property name="format" value="(public|private|static|protected|native) (final )?([A-Za-z0-9&lt;&gt;\[\].]+) ([A-Za-z0-9]+)\((?!(\)|$))"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Method arguments must always start on a new-line"/>
        </module>
    </module>
</module>
